// interface

// See https://aka.ms/new-console-template for more information
using System;

namespace Y
{
    interface i1
    {
        void PrintInterface();
    }


    public class Animal : i1
    {

        public void PrintInterface()
        {
            Console.WriteLine("Who named a parrot Moses");
        }


    }


    class Program
    {
        static void Main(string[] args)
        {
            Animal a = new Animal();
            a.PrintInterface();
        }

    }
}

// multiple interface inheritance

// See https://aka.ms/new-console-template for more information
using System;

namespace Y
{
    interface i1 : i2
    {
        void PrintInterface();
    }


    interface i2
    {
        void Print();
    }

    public class Animal : i1
    {

        public void PrintInterface()
        {
            Console.WriteLine("Who named a parrot Moses");
        }

        public void Print()
        {
            Console.WriteLine("The same man who named the rotwiler Jesus");
        }
    }


    class Program
    {
        static void Main(string[] args)
        {
            Animal a = new Animal();
            a.PrintInterface();
            a.Print();
        }

    }
}

// explicit implimentation

// See https://aka.ms/new-console-template for more information
using System;

namespace Y
{
    interface i1 : i2
    {
        void PrintInterface();
    }


    interface i2
    {
        void PrintInterface();
    }

    public class Animal : i1
    {

        void i1.PrintInterface()
        {
            Console.WriteLine("Who named a parrot Moses");
        }

        void i2.PrintInterface()
        {
            Console.WriteLine("The same man who named the rotwiler Jesus");
        }
    }


    class Program
    {
        static void Main(string[] args)
        {
            Animal a = new Animal();
            ((i1)a).PrintInterface();
            ((i2)a).PrintInterface();
        }

    }
}


//abstract class

    public abstract class Customer
    {
        public void PrintNew()
        {
            Console.WriteLine("This is not a abstract method");
        }
         public abstract void PrintN();
    }
    public class Seller : Customer
    {
        public override void PrintN()
        {
            Console.WriteLine("Hi there!");
        }

        
    }



    class Program
    {
        static void Main(string[] args)
        {
            Animal a = new Animal();
            ((i1)a).PrintInterface();
            ((i2)a).PrintInterface();
            Customer c = new Seller();
            c.PrintNew();
            c.PrintN();

        }

    }
}

// multiple class inheritance using interfaces

// See https://aka.ms/new-console-template for more information
using System;

namespace Y
{
    public delegate void WhatEverDelegate(string m);
    interface i1 : i2
    {
        void PrintInterface();
    }


    interface i2
    {
        void PrintInterface();
    }
    interface IA
    {
        void MethodA();
    }
    class A : IA
    {
        public void MethodA()
        {
            Console.WriteLine("This is Method A");
        }
    }

    interface IB
    {
        void MethodB();
    }
    class B : IB
    {
        public void MethodB()
        {
            Console.WriteLine("This is Method B");
        }
    }
    class AB : IA, IB
    {
        A ar1 = new A();
        B ar2 = new B();


        public void MethodA()
        {
            ar1.MethodA();
        }
        public void MethodB()
        {
            ar2.MethodB();
        }


    }






    class Program
    {

        public static void Hello(string s)
        {
            Console.WriteLine("the message is = {0}", s);
        }
        static void Main(string[] args)
        {
            Animal a = new Animal();
            ((i1)a).PrintInterface();
            ((i2)a).PrintInterface();
            Customer c = new Seller();
            c.PrintNew();
            c.PrintN();

            AB ab = new AB();
            ab.MethodA();
            ab.MethodB();
            WhatEverDelegate del = new WhatEverDelegate(Hello);
            del("Grrrrrrrrrr! I am Groot...");
        }

    }
}



// multicast delegate

// See https://aka.ms/new-console-template for more information
using System;
using System.Collections.Generic;

namespace tuki
{
    class What
    {
        
        static void Main(String[] args)
        {
            List<Employee> empList = new List<Employee>();
            empList.Add(new Employee() { ID = 101, Name = "Jack", Salary = 5000, Experience = 5 });
            empList.Add(new Employee() { ID = 101, Name = "Sparrow", Salary = 4000, Experience = 3 });
            empList.Add(new Employee() { ID = 101, Name = "Jonny", Salary = 6000, Experience = 4 });
            empList.Add(new Employee() { ID = 101, Name = "Depp", Salary = 3000, Experience = 6 });
            //SampleDel dell1, dell2;
            //dell1 = new SampleDel(DelPrint);
            //dell2 = new SampleDel(Dprint);
            //dell1();
            //dell2();
            SampleDel del = new SampleDel(DelPrint);
            del += (Dprint);
            del();
            Employee.PromoteEmployee(empList, emp => emp.Experience >= 5);
        }

        public static void DelPrint()
        {
            Console.WriteLine("This is a multicast delegate");
        }
        public static void Dprint()
        {
            Console.WriteLine("how you doing!");
        }
       
    }
    delegate bool IsPromotable(Employee empl);

    public delegate void SampleDel();
    class Employee
    {
        public int ID { get; set; }
        public string Name { get; set; }
        public int Salary { get; set; }
        public int Experience { get; set; }

        public static void PromoteEmployee(List<Employee> employeeList, IsPromotable IsEligibleToPromote)
        {
            foreach (Employee employee in employeeList)
            {
                if (IsEligibleToPromote(employee))
                {
                    Console.WriteLine(employee.Name + " promoted");
                }
            }
        }


    }


}


